/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import ImplementsDAO.TelefoneDAOImplements;
import ImplementsDAO.ContatoDAOImplements;
import Entidades.Contato;
import Entidades.TipoContato;
import ImplementsDAO.TipoContatoDAOImplements;
import com.sun.javafx.scene.control.skin.VirtualFlow;
import java.sql.Date;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DateFormatter;

/**
 *
 * @author User
 */
public class JPanelContatos extends javax.swing.JPanel implements InterfaceGerenciaTabela {

    /**
     * Creates new form NewJPanelPrincipal
     *
     * @throws java.sql.SQLException
     * @throws java.lang.ClassNotFoundException
     */
    public JPanelContatos() throws ClassNotFoundException, SQLException {
        initComponents();
        ContatoDAOImplements daoImpl = new ContatoDAOImplements();
        List<Object> contatos = daoImpl.pesquisarTodos();
        carregaTabela(contatos);
        carregaTipoContatoComboBox(listaComboBoxTipoContato());
    }

    public void geraCampoId() throws SQLException, ClassNotFoundException {
        ContatoDAOImplements daoImp = new ContatoDAOImplements();
        jTextFieldID.setText(String.valueOf(daoImp.retornaProximoId()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabelID = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jLabelNome = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jLabelDtNascimento = new javax.swing.JLabel();
        jTextFieldDtNascimento = new javax.swing.JTextField();
        jButtonIncluir = new javax.swing.JButton();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonAlterar = new javax.swing.JButton();
        jButtonDeletar = new javax.swing.JButton();
        jLabelTipoContato = new javax.swing.JLabel();
        jComboBoxTipoContatos = new javax.swing.JComboBox<>();
        jButtonTipoContato = new javax.swing.JButton();
        jButtonTelefones = new javax.swing.JButton();
        jLabelTituloUsuario = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jTextFieldEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0};
        layout.rowHeights = new int[] {0, 0, 0};
        setLayout(layout);

        jPanel1.setMaximumSize(new java.awt.Dimension(2147483647, 1747483647));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabelID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelID.setText("ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabelID, gridBagConstraints);

        jTextFieldID.setEditable(false);
        jTextFieldID.setColumns(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jTextFieldID, gridBagConstraints);

        jLabelNome.setText("Nome:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabelNome, gridBagConstraints);

        jTextFieldNome.setColumns(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jTextFieldNome, gridBagConstraints);

        jLabelDtNascimento.setText("Dt. Nascimento:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabelDtNascimento, gridBagConstraints);

        jTextFieldDtNascimento.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jTextFieldDtNascimento, gridBagConstraints);

        jButtonIncluir.setText("Incluir");
        jButtonIncluir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncluirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        jPanel1.add(jButtonIncluir, gridBagConstraints);

        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jButtonPesquisar, gridBagConstraints);

        jButtonAlterar.setText("Alterar");
        jButtonAlterar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        jPanel1.add(jButtonAlterar, gridBagConstraints);

        jButtonDeletar.setText("Deletar");
        jButtonDeletar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1.add(jButtonDeletar, gridBagConstraints);

        jLabelTipoContato.setText("Tipo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabelTipoContato, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jComboBoxTipoContatos, gridBagConstraints);

        jButtonTipoContato.setText("Tipo Contatos");
        jButtonTipoContato.setBorder(null);
        jButtonTipoContato.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButtonTipoContato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTipoContatoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel1.add(jButtonTipoContato, gridBagConstraints);

        jButtonTelefones.setText("Telefones");
        jButtonTelefones.setBorder(null);
        jButtonTelefones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTelefonesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(12, 5, 4, 5);
        jPanel1.add(jButtonTelefones, gridBagConstraints);

        jLabelTituloUsuario.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabelTituloUsuario.setText("CONTATO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
        jPanel1.add(jLabelTituloUsuario, gridBagConstraints);

        jLabelEmail.setText("Email:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabelEmail, gridBagConstraints);

        jTextFieldEmail.setColumns(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jTextFieldEmail, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 7, 2);
        add(jPanel1, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Email", "Dt. Nascimento", "Tipo Contato"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName(""); // NOI18N
        jTable1.setRowHeight(15);
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncluirActionPerformed
        if (camposPreenchidos()) {
            Contato contato = new Contato();
            contato.setNome(jTextFieldNome.getText());
            String data = jTextFieldDtNascimento.getText();
            String email = jTextFieldEmail.getText();
            String nomeTipoContato = jComboBoxTipoContatos.getSelectedItem().toString();
            try {
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date date = dateFormat.parse(data);
                contato.setNascimento(date);
                contato.setEmail(email);

                TipoContatoDAOImplements tipoDaoImp = new TipoContatoDAOImplements();
                TipoContato tipoContato = tipoDaoImp.pesquisarNome(nomeTipoContato);
                contato.setTipoContato(tipoContato);

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Formato data dd/MM/yyyy");
                Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);

            } catch (Exception ex) {
                Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);
            }

            ContatoDAOImplements contatoDaoImpl = new ContatoDAOImplements();
            try {
                if (contatoDaoImpl.inserir(contato)) {
                    JOptionPane.showMessageDialog(null, "Contato Inserido");
                    List<Object> contatos = contatoDaoImpl.pesquisarTodos();
                    carregaTabela(contatos);
                }
            } catch (Exception ex) {
                Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "FORMATO\nNome: xxxx\nEmail: email@dominio.com\nDt. Nascimento: DD/MM/AAAA");
        }
    }//GEN-LAST:event_jButtonIncluirActionPerformed


    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        ContatoDAOImplements daoImpl = new ContatoDAOImplements();
        if (jTextFieldNome.getText().length() == 0 && jTextFieldDtNascimento.getText().length() == 0) {
            if (jTable1.getSelectedRow() < 0) {
                //pesquisa todos
                try {
                    List<Object> usuarios = daoImpl.pesquisarTodos();
                    carregaTabela(usuarios);
                } catch (Exception ex) {
                    Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (jTable1.getSelectedRow() > -1) {
                //pesquisa pelo id do usuario selecionado na tabela      
                try {
                    Contato contatoPesquisa = (Contato) retornaSelecionadoTabela();
                    List<Object> contatos = new ArrayList<>();
                    contatos.add(contatoPesquisa);
                    carregaTabela(contatos);
                } catch (Exception ex) {
                    Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        jTable1.clearSelection();
    }//GEN-LAST:event_jButtonPesquisarActionPerformed


    private void jButtonAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarActionPerformed
        int linha = jTable1.getSelectedRow();
        if (linha > -1) {
            try {
                Contato contatoAltera = (Contato) retornaSelecionadoTabela();
                jTextFieldID.setText(String.valueOf(contatoAltera.getId()));
                jTextFieldNome.setText(contatoAltera.getNome());
                jTextFieldEmail.setText(contatoAltera.getEmail());
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                String data = sdf.format(contatoAltera.getNascimento());
                jTextFieldDtNascimento.setText(data);
                jComboBoxTipoContatos.setSelectedItem(contatoAltera.getTipoContato().getNome());
                jButtonIncluir.setVisible(false);
            } catch (Exception ex) {
                Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (camposPreenchidos() && linha == -1) {
            Contato contato = new Contato();
            contato.setNome(jTextFieldNome.getText());
            contato.setEmail(jTextFieldEmail.getText());
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            try {
                contato.setId(Integer.parseInt(jTextFieldID.getText()));
                java.util.Date date = df.parse(jTextFieldDtNascimento.getText());
                contato.setNascimento(date);

                TipoContatoDAOImplements tipoDaoImp = new TipoContatoDAOImplements();
                TipoContato tipo = tipoDaoImp.pesquisarNome(jComboBoxTipoContatos.getSelectedItem().toString());
                contato.setTipoContato(tipo);
                ContatoDAOImplements daoImp = new ContatoDAOImplements();
                daoImp.update(contato);
                limpaCampos();
                carregaTabela(daoImp.pesquisarTodos());
                JOptionPane.showMessageDialog(null, "Contato Alterado");
            } catch (DateTimeParseException ex) {
                JOptionPane.showMessageDialog(null, "Formato data dd/MM/yyyy");
                ex.printStackTrace();
            } catch (NumberFormatException n) {
                n.printStackTrace();
            } catch (ParseException ex) {
                Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(JPanelContatos.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonIncluir.setVisible(true);
        }
        jTable1.clearSelection();
    }//GEN-LAST:event_jButtonAlterarActionPerformed

    private void jButtonDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletarActionPerformed
        int linha = jTable1.getSelectedRow();
        if (linha > -1) {
            try {
                if (retornaSelecionadoTabela() != null) {
                    Contato contato = (Contato) retornaSelecionadoTabela();
                    ContatoDAOImplements daoImp = new ContatoDAOImplements();
                    TelefoneDAOImplements foneImp = new TelefoneDAOImplements();
                    if (contato != null) {
                        foneImp.excluirTelefones(contato.getId());
                        daoImp.excluir(contato.getId());
                        carregaTabela(daoImp.pesquisarTodos());
                        JOptionPane.showMessageDialog(null, "Contato excluido");
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecionae o usuário");
        }

    }//GEN-LAST:event_jButtonDeletarActionPerformed

    private void jButtonTipoContatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTipoContatoActionPerformed
        Principal.chamaTelaTipoContatos();
    }//GEN-LAST:event_jButtonTipoContatoActionPerformed

    public boolean carregouUsuarioSelecionado() throws Exception, ClassNotFoundException {
        if (jTable1.getSelectedRow() > -1) {
            Contato contato = (Contato) retornaSelecionadoTabela();
            return true;
        }
        return false;
    }


    private void jButtonTelefonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTelefonesActionPerformed
        try {
            Contato contato;
            if (jTable1.getSelectedRow() > -1 && retornaSelecionadoTabela() != null) {
                contato = (Contato) retornaSelecionadoTabela();
                Principal.chamaTelaFone(contato);
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o usuário e cadastre telefone");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButtonTelefonesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterar;
    private javax.swing.JButton jButtonDeletar;
    private javax.swing.JButton jButtonIncluir;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonTelefones;
    private javax.swing.JButton jButtonTipoContato;
    private static javax.swing.JComboBox<String> jComboBoxTipoContatos;
    private javax.swing.JLabel jLabelDtNascimento;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelTipoContato;
    private javax.swing.JLabel jLabelTituloUsuario;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldDtNascimento;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables

    public static final List<Object> listaComboBoxTipoContato() {
        TipoContatoDAOImplements tipoCttImpl = new TipoContatoDAOImplements();
        List<Object> listaTipos = new ArrayList<>();
        try {
            listaTipos = tipoCttImpl.pesquisarTodos();
            return listaTipos;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public void carregaTipoContatoComboBox(List<Object> lista) {
        List<Object> listaTipos = lista;
        if (listaTipos != null) {
            for (Object obj : listaTipos) {
                TipoContato tipoContato = (TipoContato) obj;
                jComboBoxTipoContatos.addItem(tipoContato.getNome());
            }
        }

    }

    @Override
    public Object retornaSelecionadoTabela() {
        try {
            int linha = jTable1.getSelectedRow();
            int id = Integer.parseInt(jTable1.getValueAt(linha, 0).toString());
            if (id > 0) {
                ContatoDAOImplements daoImpl = new ContatoDAOImplements();
                return daoImpl.pesquisar(id);
            } else {
                return null;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public boolean camposPreenchidos() {
        if (jTextFieldNome.getText().length() > 0 && jTextFieldDtNascimento.getText().length() > 0 && jTextFieldEmail.getText().length() > 0) {
            if (jTextFieldEmail.getText().contains("@") && jTextFieldEmail.getText().contains(".com")) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void limpaCampos() {
        try {
            geraCampoId();

        } catch (SQLException ex) {
            Logger.getLogger(JPanelContatos.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JPanelContatos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        jTextFieldNome.setText("");
        jTextFieldDtNascimento.setText("");
        jTextFieldEmail.setText("");
        jComboBoxTipoContatos.setSelectedItem("Profissional");
    }

    @Override
    public final void carregaTabela(List<Object> lista) {
        limpaCampos();
        List<Object> listaContatos = lista; //passar lista vinda do banco com todos os usuarios

        String[] colunas = {"Código", "Nome", "Email", "Nascimento", "Tipo Contato"};
        String[][] dados = new String[listaContatos.size()][colunas.length];
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        for (int i = 0; i < listaContatos.size(); i++) {
            Contato contato = (Contato) listaContatos.get(i);
            dados[i][0] = String.valueOf(contato.getId());
            dados[i][1] = contato.getNome();
            dados[i][2] = contato.getEmail();
            dados[i][3] = sdf.format(contato.getNascimento());
            dados[i][4] = contato.getTipoContato().getNome();
        }
        DefaultTableModel modelo = new DefaultTableModel(dados, colunas);
        jTable1.setModel(modelo);
    }
}
